package contsauser

import (
	"context"
	"fmt"
	"net/http"
	isauser "property/framework/interface/sa/sa_user"
	"property/framework/models"
	sa_models "property/framework/models/sa"
	"property/framework/pkg/app"
	"property/framework/pkg/logging"
	util "property/framework/pkg/utils"

	_ "property/framework/docs" // docs is generated by Swag CLI, you have to import it.

	"github.com/labstack/echo/v4"
	"github.com/mitchellh/mapstructure"
	uuid "github.com/satori/go.uuid"
	echoSwagger "github.com/swaggo/echo-swagger"
)

// ContSaUser :
type ContSaUser struct {
	useSaUser isauser.Usercase
}

// NewContSaUser :
func NewContSaUser(e *echo.Echo, useSaUser isauser.Usercase) {
	controller := &ContSaUser{
		useSaUser: useSaUser,
	}
	/*
		url := echoSwagger.URL("http://localhost:1323/swagger/doc.json") //The url pointing to API definition
	*/
	e.GET("/swagger/*", echoSwagger.WrapHandler)
	e.GET("/api/user/:id", controller.GetBySaUser)
	e.GET("/api/user/permission", controller.GetListPermission)
	e.GET("/api/user", controller.GetList)
	e.POST("/api/user", controller.CreateSaUser)
	e.PUT("/api/user/:id", controller.UpdateSaUser)
	e.DELETE("/api/user/:id", controller.DeleteSaUser)
}

// GetBySaUser :
// @Summary GetById SaUser
// @Tags User
// @Produce  json
// @Param id path string true "ID"
// @Success 200 {object} app.ResponseModel
// @Router /api/user/{id} [get]
func (u *ContSaUser) GetBySaUser(e echo.Context) error {
	ctx := e.Request().Context()
	if ctx == nil {
		ctx = context.Background()
	}

	var (
		logger = logging.Logger{}
		appE   = app.Res{R: e} // wajib
		id     = e.Param("id") //util.StrTo(e.Param("id")).MustInt() //kalo bukan int => 0
		// valid  validation.Validation                 // wajib
	)
	userID, err := uuid.FromString(id)

	// valid.Min(id, 1, "id").Message("ID must be greater than 0")
	logger.Info(id)
	if err != nil {
		return appE.ResponseError(http.StatusBadRequest, fmt.Sprintf("%v", err), nil)
	}
	// valid.Min(id, 1, "id").Message("ID must be greater than 0")
	// if valid.HasErrors() {
	// 	return appE.ResponseError(http.StatusBadRequest, app.MarkErrors(valid.Errors), nil)
	// }

	DataUser, err := u.useSaUser.GetBySaUser(ctx, userID)
	if err != nil {
		return appE.ResponseError(util.GetStatusCode(err), fmt.Sprintf("%v", err), nil)
	}
	// logger.Info(appE.ResponseError(http.StatusOK, "Ok", DataUser))
	// return e.JSON(http.StatusOK, DataUser)
	// return appE.ResponseError(http.StatusOK, "OK", DataUser)
	return appE.Response(http.StatusOK, "Ok", DataUser)

}

// GetList :
// @Summary GetList SaUser
// @Tags User
// @Produce  json
// @Param page query int true "Page"
// @Param perpage query int true "PerPage"
// @Param search query string false "Search"
// @Param initsearch query string false "InitSearch"
// @Param sortfield query string false "SortField"
// @Success 200 {object} models.ResponseModelList
// @Router /api/user [get]
func (u *ContSaUser) GetList(e echo.Context) error {
	ctx := e.Request().Context()
	if ctx == nil {
		ctx = context.Background()
	}

	var (
		logger = logging.Logger{}
		appE   = app.Res{R: e} // wajib
		//valid      validation.Validation // wajib
		paramquery   = models.ParamList{} // ini untuk list
		responseList = models.ResponseModelList{}
		err          error
	)

	httpCode, errMsg := app.BindAndValid(e, &paramquery)
	logger.Info(util.Stringify(paramquery))
	if httpCode != 200 {
		return appE.ResponseErrorList(http.StatusBadRequest, errMsg, responseList)
	}

	responseList, err = u.useSaUser.GetList(ctx, paramquery)
	if err != nil {
		// return e.JSON(http.StatusBadRequest, err.Error())
		return appE.ResponseErrorList(util.GetStatusCode(err), fmt.Sprintf("%v", err), responseList)
	}

	// return e.JSON(http.StatusOK, ListDataUser)
	return appE.ResponseList(http.StatusOK, "", responseList)
}

type GetPermission struct {
	ClinetID uuid.UUID `json:"client_id" valid:"Required"`
	UserID   uuid.UUID `json:"user_id"`
}

// GetList :
// @Summary Get string Array Permission User
// @Tags User
// @Produce  json
// @Param client_id query string true "ClientID"
// @Param user_id query string false "UserID"
// @Success 200 {object} app.ResponseModel
// @Router /api/user/permission [get]
func (u *ContSaUser) GetListPermission(e echo.Context) error {
	ctx := e.Request().Context()
	if ctx == nil {
		ctx = context.Background()
	}

	var (
		logger = logging.Logger{}
		appE   = app.Res{R: e} // wajib
		//valid      validation.Validation // wajib
		form GetPermission // ini untuk list
		err  error
	)

	userID := e.QueryParam("user_id")
	clientID := e.QueryParam("client_id")

	form.ClinetID, _ = uuid.FromString(clientID)
	form.UserID, _ = uuid.FromString(userID)
	// httpCode, errMsg := app.BindAndValid(e, &form)

	logger.Info(util.Stringify(form))
	// // if httpCode != 200 {
	// // 	return appE.ResponseError(http.StatusBadRequest, errMsg, nil)
	// // }

	dd, err := u.useSaUser.GetJsonPermission(ctx, form.UserID, form.ClinetID)
	if err != nil {
		// return e.JSON(http.StatusBadRequest, err.Error())
		// return appE.ResponseErrorList(util.GetStatusCode(err), fmt.Sprintf("%v", err), responseList)
		return appE.ResponseError(http.StatusBadRequest, fmt.Sprintf("%v", err), nil)
	}

	// return e.JSON(http.StatusOK, ListDataUser)
	return appE.Response(http.StatusCreated, "Ok", dd)
}

// CreateSaUser :
// @Summary Add User
// @Tags User
// @Produce json
// @Param req body models.AddUserForm true "req param #changes are possible to adjust the form of the registration form from frontend"
// @Success 200 {object} app.ResponseModel
// @Router /api/user [post]
func (u *ContSaUser) CreateSaUser(e echo.Context) error {
	ctx := e.Request().Context()
	if ctx == nil {
		ctx = context.Background()
	}

	var (
		logger     = logging.Logger{} // wajib
		appE       = app.Res{R: e}    // wajib
		user       sa_models.SaUser
		form       sa_models.AddUserForm
		permission []models.Permission
	)

	// validasi and bind to struct
	httpCode, errMsg := app.BindAndValid(e, &form)
	logger.Info(util.Stringify(form))
	if httpCode != 200 {
		return appE.ResponseError(http.StatusBadRequest, errMsg, nil)
	}

	// if form.Passwd != form.ConfimPasswd {
	// 	return appE.ResponseError(http.StatusBadRequest, "Password and Password Confirmation doesn't match", nil)
	// }

	// mapping to struct model saSuser
	err := mapstructure.Decode(form, &user)
	if err != nil {
		return appE.ResponseError(http.StatusInternalServerError, fmt.Sprintf("%v", err), nil)

	}

	err = mapstructure.Decode(form.DataPermission, &permission)
	if err != nil {
		return appE.ResponseError(http.StatusInternalServerError, fmt.Sprintf("%v", err), nil)

	}

	err = u.useSaUser.CreateSaUser(ctx, &user, &permission)
	if err != nil {
		return appE.ResponseError(util.GetStatusCode(err), fmt.Sprintf("%v", err), nil)
	}

	return appE.Response(http.StatusCreated, "Ok", form)
}

// UpdateSaUser :
// @Summary Update User
// @Tags User
// @Produce json
// @Param id path string true "ID"
// @Param req body models.EditUserForm true "req param #changes are possible to adjust the form of the registration form from frontend"
// @Success 200 {object} app.ResponseModel
// @Router /api/user/{id} [put]
func (u *ContSaUser) UpdateSaUser(e echo.Context) error {
	ctx := e.Request().Context()
	if ctx == nil {
		ctx = context.Background()
	}

	var (
		logger = logging.Logger{} // wajib
		appE   = app.Res{R: e}    // wajib
		user   sa_models.SaUser
		// valid  validation.Validation // wajib
		id         = e.Param("id") //util.StrTo(e.Param("id")).MustInt() //kalo bukan int => 0
		form       = sa_models.EditUserForm{}
		permission []models.Permission
	)

	userID, err := uuid.FromString(id)

	// valid.Min(id, 1, "id").Message("ID must be greater than 0")
	logger.Info(id)
	if err != nil {
		return appE.ResponseError(http.StatusBadRequest, fmt.Sprintf("%v", err), nil)
	}

	// validasi and bind to struct
	httpCode, errMsg := app.BindAndValid(e, &form)
	logger.Info(util.Stringify(form))
	if httpCode != 200 {
		return appE.ResponseError(http.StatusBadRequest, errMsg, nil)
	}

	// mapping to struct model saSuser
	err = mapstructure.Decode(form, &user)
	if err != nil {
		return appE.ResponseError(http.StatusInternalServerError, fmt.Sprintf("%v", err), nil)

	}
	err = mapstructure.Decode(form.DataPermission, &permission)
	if err != nil {
		return appE.ResponseError(http.StatusInternalServerError, fmt.Sprintf("%v", err), nil)

	}

	user.UserID = userID
	err = u.useSaUser.UpdateSaUser(ctx, &user, &permission)
	if err != nil {
		return appE.ResponseError(util.GetStatusCode(err), fmt.Sprintf("%v", err), nil)
	}
	return appE.Response(http.StatusCreated, "Ok", form)
}

// DeleteSaUser :
// @Summary GetList SaUser
// @Tags User
// @Produce  json
// @Param id path string true "ID"
// @Success 200 {object} app.ResponseModel
// @Router /api/user [delete]
func (u *ContSaUser) DeleteSaUser(e echo.Context) error {
	ctx := e.Request().Context()
	if ctx == nil {
		ctx = context.Background()
	}

	var (
		logger = logging.Logger{}
		appE   = app.Res{R: e} // wajib
		id     = e.Param("id") //util.StrTo(e.Param("id")).MustInt() //kalo bukan int => 0
		// valid  validation.Validation                 // wajib
	)
	userID, err := uuid.FromString(id)
	// valid.Min(id, 1, "id").Message("ID must be greater than 0")
	logger.Info(id)
	if err != nil {
		return appE.ResponseError(http.StatusBadRequest, fmt.Sprintf("%v", err), nil)
	}
	err = u.useSaUser.DeleteSaUser(ctx, userID)
	if err != nil {
		return appE.ResponseError(util.GetStatusCode(err), err.Error(), nil)
	}
	return appE.Response(http.StatusNoContent, "", nil)
}
